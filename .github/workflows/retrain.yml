name: Detect Drift and Retrain

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch: 

jobs:
  detect-drift:
    runs-on: ubuntu-latest

    env:
      S3_BUCKET: fraud-detection-dvc-store
      FOLDER_NAME: incoming
    
    concurrency:                           # avoid overlaps
      group: drift-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: write

    outputs:
      drift: ${{ steps.drift-flag.outputs.drift }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Dependencies
        # run: pip install evidently pandas boto3 dvc[s3]
        run: pip install pandas dvc[s3]

      - name: Pull Data & Artifacts
        run: dvc pull -q

      - name: Sync new files from S3
        run: |
          mkdir -p data/incoming
          aws s3 sync s3://$S3_BUCKET/$FOLDER_NAME data/$FOLDER_NAME --delete --exact-timestamps
          python -m scripts.merge_incoming_files
          echo "NEWFILES=$(ls -1 data/$FOLDER_NAME | wc -l)" >> $GITHUB_ENV

      - name: Run Drift Report
        if: env.NEWFILES != '0'
        id: drift-flag
        run: python -m scripts.detect_drift

      - name: Update files
        if: steps.drift-flag.outputs.drift == 'true'
        run: |
          echo "True"
          ls -l
        
      - name: Update files False
        if: steps.drift-flag.outputs.drift == 'false'
        run: echo "False"
          
  retrain:
    needs: detect-drift
    if: needs.detect-drift.outputs.drift == 'true'
    
    runs-on: ubuntu-latest

    env:
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}

    permissions:
      contents: write      # <- allow git push
      id-token: write      # (keep this if you still assume the AWS role)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.OIDC_ROLE }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Dependencies
        run: |
          pip install --no-cache-dir torch --index-url https://download.pytorch.org/whl/cpu
          pip install --no-cache-dir -r requirements.txt

      - name: Retrain
        run: python -m src.training.train
      
      - name: Push Artifacts
        run: |
          git config user.name github-actions-bot
          git config user.email github-actions-bot@users.noreply.github.com
          git add artifacts
          git commit -m "Auto-retrain: $(date -u +%F)" || echo "No changes"
          git push

